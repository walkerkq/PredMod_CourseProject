setwd("/Users/kwalker/git_projects/PredMod_CourseProject/")
raw_test <- read.csv("pml-testing.csv", na.strings=c("NA", "#DIV/0", stringsAsFactors=FALSE))
raw_train <- read.csv("pml-training.csv", na.strings=c("NA", "#DIV/0", stringsAsFactors=FALSE))
library("knitr")
library("ggplot2")
library("reshape")
library("gridExtra")
library("RColorBrewer")
library("caret")
opts_chunk$set(echo=FALSE, cache=TRUE, message=FALSE, warning=FALSE, fig.height=5, fig.width=12)
percentage <- function(x) round(x, 4)*100
clean <- raw_train
# make numeric
for (i in c(1, 3, 4, 7:159) ) clean[,i] <- as.numeric(clean[,i])
# remove any collinear variables
co <- cor(clean[ ,c(3:4, 7:159)], use="pairwise.complete.obs")
diag(co) <- 0
pairs <- NULL
for ( i in 1:length(co[,1]) ) {
for ( x in 1:length(co[1,])) {
if (!is.na(co[x,i]) & co[x,i] > .9) {
z <- i + 1
m <- x + 1
rname <- row.names(co[i:z,])[1]
cname <- colnames(co[,x:m])[1]
pairs <- rbind(pairs, c(rname, cname, co[x,i]))
}
}
}
pairs <- data.frame(pairs, stringsAsFactors=FALSE)
pairs <- pairs[order(-as.numeric(pairs$X3)),]
collinears <- c("var_total_accel_belt", "var_yaw_belt", "var_pitch_forearm", "roll_arm",
"var_yaw_dumbell", "accel_belt_y", "var_pitch_dumbell", "accel_belt_y",
"var_pitch_arm", "var_pitch_belt", "yaw_dumbell", "gyros_forearm_z",
"var_roll_belt", "accel_belt_y", "avg_yaw_dumbell", "stddev_yaw_forearm",
"var_roll_dumbell", "stddev_yaw_dumbell", "stddev_pitch_dumbell",
"min_pitch_belt", "stddev_yaw_arm", "var_yaw_forearm", "min_roll_belt",
"roll_belt", "avg_roll_belt", "stddev_yaw_belt", "stddev_pitch_forearm",
"total_accel_belt", "min_pitch_belt", "total_accel_belt", "stddev_pitch_arm",
"yaw_belt", "max_roll_belt", "avg_yaw_belt", "min_yaw_forearm",
"max_yaw_forearm", "min_yaw_belt", "max_yaw_dumbell", "min_yaw_dumbell")
clean.nocor <- clean[ , !(colnames(clean) %in% collinears)]
high.NAs <- c(9:22, 34:40, 50:64, 68:82, 85:93, 106:118, 120:125)
clean.cut <- clean.nocor[ ,-high.NAs]
cleanTest <- raw_test
for (i in c(1, 3, 4, 7:159) ) cleanTest[,i] <- as.numeric(cleanTest[,i])
cleanTest.nocor <- cleanTest[ , !(colnames(cleanTest) %in% collinears)]
cleanTest.cut <- cleanTest.nocor[ ,-high.NAs]
inTrain <- createDataPartition(y=clean.cut$classe, p=.75, list=FALSE)
training <- traincut[inTrain, ]
testing <- traincut[-inTrain, ]
training <- clean.cut[inTrain, ]
testing <- clean.cut[-inTrain, ]
?ave
?complete.cases
ok <- complete.cases(raw_train)
head(ok)
ok[1:300]
n <- raw_train[, apply(raw_train, 2, function(x) !any(is.na(x)))]
colMeans(raw_train)
colMeans(raw_train[,8:159])
clean <- raw_train
# make numeric
for (i in c(1, 3, 4, 7:159) ) clean[,i] <- as.numeric(clean[,i])
colMeans(clean[,8:159])
colSums(is.na(clean[,8:100]))
clean <- raw_train
# make numeric
for (i in c(1, 3, 4, 7:159) ) clean[,i] <- as.numeric(clean[,i])
# remove any collinear variables
co <- cor(clean[ ,c(3:4, 7:159)], use="pairwise.complete.obs")
diag(co) <- 0
pairs <- NULL
for ( i in 1:length(co[,1]) ) {
for ( x in 1:length(co[1,])) {
if (!is.na(co[x,i]) & co[x,i] > .9) {
z <- i + 1
m <- x + 1
rname <- row.names(co[i:z,])[1]
cname <- colnames(co[,x:m])[1]
pairs <- rbind(pairs, c(rname, cname, co[x,i]))
}
}
}
pairs <- data.frame(pairs, stringsAsFactors=FALSE)
pairs <- pairs[order(-as.numeric(pairs$X3)),]
collinears <- c("var_total_accel_belt", "var_yaw_belt", "var_pitch_forearm", "roll_arm",
"var_yaw_dumbell", "accel_belt_y", "var_pitch_dumbell", "accel_belt_y",
"var_pitch_arm", "var_pitch_belt", "yaw_dumbell", "gyros_forearm_z",
"var_roll_belt", "accel_belt_y", "avg_yaw_dumbell", "stddev_yaw_forearm",
"var_roll_dumbell", "stddev_yaw_dumbell", "stddev_pitch_dumbell",
"min_pitch_belt", "stddev_yaw_arm", "var_yaw_forearm", "min_roll_belt",
"roll_belt", "avg_roll_belt", "stddev_yaw_belt", "stddev_pitch_forearm",
"total_accel_belt", "min_pitch_belt", "total_accel_belt", "stddev_pitch_arm",
"yaw_belt", "max_roll_belt", "avg_yaw_belt", "min_yaw_forearm",
"max_yaw_forearm", "min_yaw_belt", "max_yaw_dumbell", "min_yaw_dumbell")
clean.nocor <- clean[ , !(colnames(clean) %in% collinears)]
clean.cut <- clean.nocor[,colSums(is.na(clean.nocor)) == 0]
head(clean.cut)
clean <- raw_train
head(clean)
clean <- raw_train
clean.cut <- clean[,colSums(is.na(clean)) == 0]
head(clean.cut)
colSums(is.na(clean))
raw_train <- read.csv("pml-training.csv", stringsAsFactors=FALSE))
raw_train <- read.csv("pml-training.csv", stringsAsFactors=FALSE)
clean <- raw_train
clean.cut <- clean[,colSums(is.na(clean)) == 0]
?read.csv
raw_train <- read.csv("pml-training.csv", na.strings=c("NA", "#DIV/0", ""), stringsAsFactors=FALSE)
clean <- raw_train
clean.cut <- clean[,colSums(is.na(clean)) == 0]
colSums(is.na(clean))
clean.cut <- clean.cut[ ,-c(1:6)]
for (i in 1:53 ) clean.cut[,i] <- as.numeric(clean.cut[,i])
co <- cor(clean.cut[ ,1:53], use="pairwise.complete.obs")
diag(co) <- 0
View(co)
pairs <- NULL
pairs <- NULL
for ( i in 1:length(co[,1]) ) {
for ( x in 1:length(co[1,])) {
if (!is.na(co[x,i]) & co[x,i] > .9) {
z <- i + 1
m <- x + 1
rname <- row.names(co[i:z,])[1]
cname <- colnames(co[,x:m])[1]
pairs <- rbind(pairs, c(rname, cname, co[x,i]))
}
}
}
View(pairs)
pairs <- data.frame(pairs, stringsAsFactors=FALSE)
pairs <- pairs[order(-as.numeric(pairs$X3)),]
View(pairs)
pairs
clean.nocor <- clean.cut[ , !(colnames(clean.cut) %in% collinears)]
clean <- raw_train
# transform: remove variables that are mostly NA
clean.cut <- clean[,colSums(is.na(clean)) == 0]
# remove first 6 variables, which are excess
clean.cut <- clean.cut[ ,-c(1:6)]
# make numeric
for (i in 1:53 ) clean.cut[,i] <- as.numeric(clean.cut[,i])
# remove any collinear variables
co <- cor(clean.cut[ ,1:53], use="pairwise.complete.obs")
diag(co) <- 0
pairs <- NULL
for ( i in 1:length(co[,1]) ) {
for ( x in 1:length(co[1,])) {
if (!is.na(co[x,i]) & co[x,i] > .9) {
z <- i + 1
m <- x + 1
rname <- row.names(co[i:z,])[1]
cname <- colnames(co[,x:m])[1]
pairs <- rbind(pairs, c(rname, cname, co[x,i]))
}
}
}
pairs <- data.frame(pairs, stringsAsFactors=FALSE)
pairs <- pairs[order(-as.numeric(pairs$X3)),]
collinears <- c("total_accel_belt", "gyros_dumbell_z", "accel_belt_y")
clean.nocor <- clean.cut[ , !(colnames(clean.cut) %in% collinears)]
clean <- raw_train
clean.cut <- clean[,colSums(is.na(clean)) == 0]
clean.cut <- clean.cut[ ,-c(1:6)]
for (i in 1:53 ) clean.cut[,i] <- as.numeric(clean.cut[,i])
co <- cor(clean.cut[ ,1:53], use="pairwise.complete.obs")
diag(co) <- 0
pairs <- NULL
for ( i in 1:length(co[,1]) ) {
for ( x in 1:length(co[1,])) {
if (!is.na(co[x,i]) & co[x,i] > .9) {
z <- i + 1
m <- x + 1
rname <- row.names(co[i:z,])[1]
cname <- colnames(co[,x:m])[1]
pairs <- rbind(pairs, c(rname, cname, co[x,i]))
}
}
}
pairs <- data.frame(pairs, stringsAsFactors=FALSE)
pairs <- pairs[order(-as.numeric(pairs$X3)),]
collinears <- c("total_accel_belt", "gyros_dumbell_z", "accel_belt_y")
clean.nocor <- clean.cut[ , !(colnames(clean.cut) %in% collinears)]
names(clean.cut)
names(clean.nocor)
cleanTest <- raw_test
cleanTest <- cleanTest[ ,-c(1:6)]
for (i in c(1:153) ) cleanTest[,i] <- as.numeric(cleanTest[,i])
cleanTest.cut <- cleanTest.nocor[ ,colSums(is.na(clean)) == 0]
cleanTest.cut <- cleanTest[ ,colSums(is.na(cleanTest)) == 0]
cleanTest.nocor <- cleanTest.cut[ , !(colnames(cleanTest.cut) %in% collinears)]
inTrain <- createDataPartition(y=clean.cut$classe, p=.75, list=FALSE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
names(clean.cut) == names(cleanTest.cut)
source('~/.active-rstudio-document', echo=TRUE)
head(training)
head(testing)
str(training)
modFit <- train(classe ~., method="rpart", data="training")
library("randomforest")
modFit <- train(classe ~ . , method="rpart", data="training")
modFit <- train(classe ~ . , "rpart", training)
?train
mod1 <- train(classe~., method="rpart", data=training)
mod1
mod1 <- train(as.factor(classe)~., method="rpart", data=training)
mod1
fancyRpartPlot(mod1$finalModel,cex=.5,under.cex=1,shadow.offset=0)
?fancyRpartPlot
library("rattle")
install.packages("rattle")
library("rattle")
fancyRpartPlot(mod1$finalModel,cex=.5,under.cex=1,shadow.offset=0)
?fancyRpartPlot
fancyRpartPlot(mod1$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(mod1$finalModel)
fancyRpartPlot(mod1$finalModel, cex=.75)
fancyRpartPlot(mod1$finalModel, cex=.6)
mod1Predict <- predict(mod1, testing)
confusionMatrix(testing$classe, mod1Predict)
print(mod1$finalModel)
mod2 <- train(as.factor(classe)~., method="rf", data=training)
?RandomForest
?randomForest
mod2 <- randomForest(classe~., data=training)
mod2 <- randomForest(as.factor(classe)~., data=training)
mod2Predict <- predict(mod2, testing)
confusionMatrix(testing$classe, mod2Predict)
library("randomForest")
mod2Predict2 <- predict(mod2, training)
confusionMatrix(training$classe, mod2Predict)
mod2Predict2 <- predict(mod2, training)
confusionMatrix(training$classe, mod2Predict2)
confusionMatrix(testing$classe, mod2Predict)
confusionMatrix(testing$classe, mod1Predict)
